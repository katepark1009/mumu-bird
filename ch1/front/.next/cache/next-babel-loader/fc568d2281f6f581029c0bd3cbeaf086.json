{"ast":null,"code":"var _jsxFileName = \"C:\\\\hotb\\\\study\\\\mumu-bird\\\\ch1\\\\front\\\\pages\\\\signup.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback, memo } from 'react';\nimport { Form, Checkbox, Button, Input } from 'antd';\nconst TextInput = memo(({\n  value,\n  onChange\n}) => {\n  return __jsx(Input, {\n    name: \"user-id\",\n    value: value,\n    required: true,\n    onChange: onchange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  });\n}); //자식 component를 memo로 덮어서 최적화 시키는 방법: \n//antd에서 Input이 일반 component여서 memo를 사용해서 \n//pure component가 적용 안된 일반 component를 강제로 변환, 해당 인풋이 변할때만 랜더링 되도록 할 수 있음.\n\nconst Signup = () => {\n  const {\n    0: passwordCheck,\n    1: setPasswordCheck\n  } = useState('');\n  const {\n    0: term,\n    1: setTerm\n  } = useState(false);\n  const {\n    0: passwordError,\n    1: setPasswordError\n  } = useState(false);\n  const {\n    0: termError,\n    1: setTermError\n  } = useState(false); //custom hook for onChange handler\n\n  const useInput = (initValue = null) => {\n    const {\n      0: value,\n      1: setter\n    } = useState(initValue);\n    const handler = useCallback(e => {\n      //이벤트 리스너들은 특정 컴포넌트 안에 들어가 있는데, 자식 컴포넌트에 전달하는 함수들 => prop으로 넘겨주는 함수들은 useCallback으로 감싸줘야 함.  \n      //useState때문에(setState같이 변화가 생기게 되니까) return부분이 다시 실행되고 새로운 함수를 생성하게 되면서 의도치 않은 리랜더링이 발생됨.\n      setter(e.target.value);\n    }, []);\n    return [value, handler];\n  }; //Hook은 함수, 조건문, 반복문 안에는 넣지 말기\n\n\n  const [id, onChangeId] = useInput('');\n  const [nick, onChangeNick] = useInput('');\n  const [password, onChangePassword] = useInput('');\n  const onSubmit = useCallback(e => {\n    e.preventDefault();\n\n    if (password !== passwordCheck) {\n      return setPasswordError(true);\n    }\n\n    if (!term) {\n      return setTermError(true);\n    }\n  }, [password, passwordCheck, term]);\n  const onChangePasswordCheck = useCallback(e => {\n    setPasswordError(e.target.value !== password);\n    setPasswordCheck(e.target.value);\n  }, [password]); //함수 안에서 사용하는 state를 deps(디펜던시) array안에 넣어주어야 함.\n\n  const onChangeTerm = useCallback(e => {\n    setTermError(false);\n    setTerm(e.target.checked);\n  }); //함수 안에서 사용하는 state 없을때는 [] 생략\n\n  return __jsx(React.Fragment, null, __jsx(Form, {\n    onSubmit: onSubmit,\n    style: {\n      padding: 20\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: \"user-id\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"ID\"), __jsx(Input, {\n    name: \"user-id\",\n    required: true,\n    value: id,\n    onChange: onChangeId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  })), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: \"user-nick\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, \"Nick name\"), __jsx(Input, {\n    name: \"user-nick\",\n    required: true,\n    value: nick,\n    onChange: onChangeNick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  })), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: \"user-password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, \"Password\"), __jsx(Input, {\n    name: \"user-password\",\n    type: \"password\",\n    value: password,\n    required: true,\n    onChange: onChangePassword,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  })), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: \"user-password-check\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, \"Check Password\"), __jsx(Input, {\n    name: \"user-password-check\",\n    type: \"password\",\n    value: passwordCheck,\n    required: true,\n    onChange: onChangePasswordCheck,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }), passwordError && __jsx(\"div\", {\n    style: {\n      color: 'red'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \"Password is not matched.\")), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, __jsx(Checkbox, {\n    name: \"user-term\",\n    checked: term,\n    onChange: onChangeTerm,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, \"agree with terms\"), termError && __jsx(\"div\", {\n    style: {\n      color: 'red'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"Please check agree.\")), __jsx(\"div\", {\n    style: {\n      marginTop: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \"Join\"))));\n};\n\nexport default Signup;","map":{"version":3,"sources":["C:/hotb/study/mumu-bird/ch1/front/pages/signup.js"],"names":["React","useState","useCallback","memo","Form","Checkbox","Button","Input","TextInput","value","onChange","onchange","Signup","passwordCheck","setPasswordCheck","term","setTerm","passwordError","setPasswordError","termError","setTermError","useInput","initValue","setter","handler","e","target","id","onChangeId","nick","onChangeNick","password","onChangePassword","onSubmit","preventDefault","onChangePasswordCheck","onChangeTerm","checked","padding","color","marginTop"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, memo } from 'react'\r\nimport { Form, Checkbox, Button, Input } from 'antd'\r\n\r\nconst TextInput = memo(({value, onChange}) => {\r\n  return (\r\n    <Input name='user-id' value={value} required onChange={onchange} />\r\n  )\r\n}) \r\n//자식 component를 memo로 덮어서 최적화 시키는 방법: \r\n//antd에서 Input이 일반 component여서 memo를 사용해서 \r\n//pure component가 적용 안된 일반 component를 강제로 변환, 해당 인풋이 변할때만 랜더링 되도록 할 수 있음.\r\n\r\nconst Signup = () => {\r\n  const [passwordCheck, setPasswordCheck] = useState('')\r\n  const [term, setTerm] = useState(false)\r\n  const [passwordError, setPasswordError] = useState(false)\r\n  const [termError, setTermError] = useState(false)\r\n\r\n  //custom hook for onChange handler\r\n  const useInput = (initValue = null) => {\r\n    const [value, setter] = useState(initValue)\r\n    const handler = useCallback((e) => {\r\n      //이벤트 리스너들은 특정 컴포넌트 안에 들어가 있는데, 자식 컴포넌트에 전달하는 함수들 => prop으로 넘겨주는 함수들은 useCallback으로 감싸줘야 함.  \r\n      //useState때문에(setState같이 변화가 생기게 되니까) return부분이 다시 실행되고 새로운 함수를 생성하게 되면서 의도치 않은 리랜더링이 발생됨.\r\n      setter(e.target.value)\r\n    }, [])\r\n    return [value, handler]\r\n  }\r\n  //Hook은 함수, 조건문, 반복문 안에는 넣지 말기\r\n  const [id, onChangeId] = useInput('')\r\n  const [nick, onChangeNick] = useInput('')\r\n  const [password, onChangePassword] = useInput('')\r\n\r\n  const onSubmit = useCallback((e) => {\r\n    e.preventDefault()\r\n    if (password !== passwordCheck) {\r\n      return setPasswordError(true)\r\n    }\r\n    if (!term) {\r\n      return setTermError(true)\r\n    }\r\n  }, [password, passwordCheck, term])\r\n\r\n  const onChangePasswordCheck = useCallback((e) => {\r\n    setPasswordError(e.target.value !== password)\r\n    setPasswordCheck(e.target.value)\r\n  }, [password]) //함수 안에서 사용하는 state를 deps(디펜던시) array안에 넣어주어야 함.\r\n\r\n  const onChangeTerm = useCallback((e) => {\r\n    setTermError(false)\r\n    setTerm(e.target.checked)\r\n  }) //함수 안에서 사용하는 state 없을때는 [] 생략\r\n\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <Form onSubmit={onSubmit} style={{ padding: 20 }}>\r\n        <div>\r\n          <label htmlFor='user-id'>ID</label>\r\n          <Input name='user-id' required value={id} onChange={onChangeId} />\r\n        </div>\r\n        <div>\r\n          <label htmlFor='user-nick'>Nick name</label>\r\n          <Input name='user-nick' required value={nick} onChange={onChangeNick} />\r\n        </div>\r\n        <div>\r\n          <label htmlFor='user-password'>Password</label>\r\n          <Input name='user-password' type='password' value={password} required onChange={onChangePassword} />\r\n        </div>\r\n        <div>\r\n          <label htmlFor='user-password-check'>Check Password</label>\r\n          <Input name='user-password-check' type='password' value={passwordCheck} required onChange={onChangePasswordCheck} />\r\n          {passwordError && <div style={{ color: 'red' }}>Password is not matched.</div>}\r\n        </div>\r\n        <div>\r\n          <Checkbox name='user-term' checked={term} onChange={onChangeTerm}>agree with terms</Checkbox>\r\n          {termError && <div style={{ color: 'red' }}>Please check agree.</div>}\r\n        </div>\r\n        <div style={{ marginTop: 10 }}>\r\n          <Button type='primary' htmlType='submit'>Join</Button>\r\n        </div>\r\n      </Form>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Signup"]},"metadata":{},"sourceType":"module"}