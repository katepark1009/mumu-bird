{"version":3,"file":"static/webpack/static\\development\\pages\\signup.js.746f6b932eb9e90f475f.hot-update.js","sources":["webpack:///./pages/signup.js"],"sourcesContent":["import React, { useState, useCallback, memo } from 'react'\r\nimport { Form, Checkbox, Button, Input } from 'antd'\r\n\r\nconst TextInput = memo(({value, onChange}) => {\r\n  return (\r\n    <Input name='user-id' value={value} required onChange={onchange} />\r\n  )\r\n}) \r\n//자식 component를 memo로 덮어서 최적화 시키는 방법: \r\n//antd에서 Input이 일반 component여서 memo를 사용해서 \r\n//pure component가 적용 안된 일반 component를 강제로 변환, 해당 인풋이 변할때만 랜더링 되도록 할 수 있음.\r\n\r\nconst Signup = () => {\r\n  const [passwordCheck, setPasswordCheck] = useState('')\r\n  const [term, setTerm] = useState(false)\r\n  const [passwordError, setPasswordError] = useState(false)\r\n  const [termError, setTermError] = useState(false)\r\n\r\n  //custom hook for onChange handler\r\n  const useInput = (initValue = null) => {\r\n    const [value, setter] = useState(initValue)\r\n    const handler = useCallback((e) => {\r\n      //이벤트 리스너들은 특정 컴포넌트 안에 들어가 있는데, 자식 컴포넌트에 전달하는 함수들 => prop으로 넘겨주는 함수들은 useCallback으로 감싸줘야 함.  \r\n      //useState때문에(setState같이 변화가 생기게 되니까) return부분이 다시 실행되고 새로운 함수를 생성하게 되면서 의도치 않은 리랜더링이 발생됨.\r\n      setter(e.target.value)\r\n    }, [])\r\n    return [value, handler]\r\n  }\r\n  //Hook은 함수, 조건문, 반복문 안에는 넣지 말기\r\n  const [id, onChangeId] = useInput('')\r\n  const [nick, onChangeNick] = useInput('')\r\n  const [password, onChangePassword] = useInput('')\r\n\r\n  const onSubmit = useCallback((e) => {\r\n    e.preventDefault()\r\n    if (password !== passwordCheck) {\r\n      return setPasswordError(true)\r\n    }\r\n    if (!term) {\r\n      return setTermError(true)\r\n    }\r\n  }, [password, passwordCheck, term])\r\n\r\n  const onChangePasswordCheck = useCallback((e) => {\r\n    setPasswordError(e.target.value !== password)\r\n    setPasswordCheck(e.target.value)\r\n  }, [password]) //함수 안에서 사용하는 state를 deps(디펜던시) array안에 넣어주어야 함.\r\n\r\n  const onChangeTerm = useCallback((e) => {\r\n    setTermError(false)\r\n    setTerm(e.target.checked)\r\n  }) //함수 안에서 사용하는 state 없을때는 [] 생략\r\n\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <Form onSubmit={onSubmit} style={{ padding: 20 }}>\r\n        <div>\r\n          <label htmlFor='user-id'>ID</label>\r\n          <Input name='user-id' required value={id} onChange={onChangeId} />\r\n        </div>\r\n        <div>\r\n          <label htmlFor='user-nick'>Nick name</label>\r\n          <Input name='user-nick' required value={nick} onChange={onChangeNick} />\r\n        </div>\r\n        <div>\r\n          <label htmlFor='user-password'>Password</label>\r\n          <Input name='user-password' type='password' value={password} required onChange={onChangePassword} />\r\n        </div>\r\n        <div>\r\n          <label htmlFor='user-password-check'>Check Password</label>\r\n          <Input name='user-password-check' type='password' value={passwordCheck} required onChange={onChangePasswordCheck} />\r\n          {passwordError && <div style={{ color: 'red' }}>Password is not matched.</div>}\r\n        </div>\r\n        <div>\r\n          <Checkbox name='user-term' checked={term} onChange={onChangeTerm}>agree with terms</Checkbox>\r\n          {termError && <div style={{ color: 'red' }}>Please check agree.</div>}\r\n        </div>\r\n        <div style={{ marginTop: 10 }}>\r\n          <Button type='primary' htmlType='submit'>Join</Button>\r\n        </div>\r\n      </Form>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Signup"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AAKA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAosourceRoot":""}